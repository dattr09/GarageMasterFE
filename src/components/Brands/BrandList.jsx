import React, { useEffect, useState } from "react";
import { getAllBrands, deleteBrand } from "../../services/BrandApi";
import { getAllParts } from "../../services/PartsApi";
import Swal from "sweetalert2";
import AddBrandForm from "./AddBrandForm";
import EditBrandForm from "./EditBrandForm";
import BrandDetails from "./BrandDetails";
import { PlusCircle, Pencil, Trash2, Info } from "lucide-react";

export default function BrandList() {
  const [brands, setBrands] = useState([]);
  const [parts, setParts] = useState([]);
  const [showForm, setShowForm] = useState(false);
  const [editing, setEditing] = useState(null);
  const [showDetail, setShowDetail] = useState(false);
  const [detailBrand, setDetailBrand] = useState(null);
  const [userRole, setUserRole] = useState("");

  // L·∫•y danh s√°ch h√£ng xe v√† linh ki·ªán, ƒë·ªìng th·ªùi l·∫•y role ng∆∞·ªùi d√πng
  useEffect(() => {
    getAllBrands().then(setBrands).catch(() => { });
    getAllParts().then(setParts);
    const user = JSON.parse(localStorage.getItem("user"));
    setUserRole(user?.role || "");
  }, []);

  // M·ªü form th√™m/s·ª≠a h√£ng xe
  const openForm = (brand = null) => {
    setEditing(brand);
    setShowForm(true);
  };

  // ƒê√≥ng form th√™m/s·ª≠a h√£ng xe
  const closeForm = () => {
    setShowForm(false);
    setEditing(null);
  };

  // Sau khi l∆∞u th√†nh c√¥ng, reload danh s√°ch v√† ƒë√≥ng form
  const handleSaved = async () => {
    const list = await getAllBrands();
    setBrands(list);
    closeForm();
  };

  // X·ª≠ l√Ω x√≥a h√£ng xe
  const handleDelete = async (id) => {
    const result = await Swal.fire({
      title: "B·∫°n ch·∫Øc ch·∫Øn mu·ªën x√≥a h√£ng xe n√†y?",
      text: "H√†nh ƒë·ªông n√†y kh√¥ng th·ªÉ ho√†n t√°c!",
      icon: "warning",
      showCancelButton: true,
      confirmButtonColor: "#d33",
      cancelButtonColor: "#3085d6",
      confirmButtonText: "X√≥a",
      cancelButtonText: "H·ªßy",
    });
    if (result.isConfirmed) {
      await deleteBrand(id);
      const list = await getAllBrands();
      setBrands(list);
      Swal.fire("ƒê√£ x√≥a!", "H√£ng xe ƒë√£ ƒë∆∞·ª£c x√≥a.", "success");
    }
  };

  // Hi·ªÉn th·ªã popup chi ti·∫øt h√£ng xe
  const handleShowDetail = (brand) => {
    setDetailBrand(brand);
    setShowDetail(true);
  };

  // ƒê√≥ng popup chi ti·∫øt h√£ng xe
  const closeDetail = () => {
    setShowDetail(false);
    setDetailBrand(null);
  };

  return (
    <>
      <div className="max-w-5xl mx-auto bg-white rounded-xl shadow-xl p-6 mt-6 animate-fade-in">
        <h2 className="text-3xl font-extrabold text-center text-blue-800 mb-6 drop-shadow-md">
          üèçÔ∏è Danh s√°ch h√£ng xe
        </h2>

        <div className="flex flex-col sm:flex-row gap-3 items-center justify-between mb-6">
          <span className="text-gray-600 text-sm italic">T·ªïng c√≥ {brands.length} h√£ng xe</span>
          {userRole === "Admin" && (
            <button
              onClick={() => openForm()}
              className="flex items-center gap-2 bg-green-600 hover:bg-green-800 text-white font-bold px-4 py-2 rounded-xl transition shadow"
            >
              <PlusCircle size={20} /> Th√™m m·ªõi
            </button>
          )}
        </div>

        <div className="overflow-x-auto rounded-xl border border-gray-200 shadow">
          <table className="min-w-full divide-y divide-gray-200 text-sm text-gray-700">
            <thead className="bg-blue-100 text-blue-900">
              <tr>
                <th className="px-6 py-3 text-center font-semibold">T√™n h√£ng xe</th>
                <th className="px-6 py-3 text-center font-semibold">·∫¢nh</th>
                <th className="px-6 py-3 text-center font-semibold">Thao t√°c</th>
              </tr>
            </thead>
            <tbody>
              {brands.length === 0 ? (
                <tr>
                  <td colSpan={3} className="text-center py-6 text-gray-400 italic">
                    Kh√¥ng c√≥ h√£ng xe n√†o.
                  </td>
                </tr>
              ) : (
                brands.map((brand, idx) => (
                  <tr
                    key={brand.id}
                    className={`transition ${idx % 2 === 0 ? "bg-white" : "bg-blue-50"
                      } hover:bg-blue-100`}
                  >
                    <td className="px-6 py-4 text-center font-medium">{brand.name}</td>
                    <td className="px-6 py-4 text-center">
                      {brand.image ? (
                        <img
                          src={brand.image}
                          alt={brand.name}
                          className="h-10 w-10 object-contain mx-auto"
                        />
                      ) : (
                        <span className="text-gray-400 italic">Kh√¥ng c√≥ ·∫£nh</span>
                      )}
                    </td>
                    <td className="px-6 py-4 text-center flex flex-wrap justify-center gap-2">
                      <button
                        onClick={() => handleShowDetail(brand)}
                        className="flex items-center gap-1 bg-blue-500 hover:bg-blue-700 text-white px-3 py-1 rounded-lg shadow font-semibold transition"
                        title="Chi ti·∫øt"
                      >
                        <Info size={16} /> Chi ti·∫øt
                      </button>
                      {userRole === "Admin" && (
                        <>
                          <button
                            onClick={() => openForm(brand)}
                            className="flex items-center gap-1 bg-yellow-400 hover:bg-yellow-600 text-white px-3 py-1 rounded-lg shadow font-semibold transition"
                            title="S·ª≠a"
                          >
                            <Pencil size={16} /> S·ª≠a
                          </button>
                          <button
                            onClick={() => handleDelete(brand.id)}
                            className="flex items-center gap-1 bg-red-500 hover:bg-red-700 text-white px-3 py-1 rounded-lg shadow font-semibold transition"
                            title="X√≥a"
                          >
                            <Trash2 size={16} /> X√≥a
                          </button>
                        </>
                      )}
                    </td>
                  </tr>
                ))
              )}
            </tbody>
          </table>
        </div>

        {showForm &&
          (editing ? (
            <EditBrandForm brand={editing} onClose={closeForm} onSaved={handleSaved} />
          ) : (
            <AddBrandForm onClose={closeForm} onSaved={handleSaved} />
          ))}

        {showDetail && detailBrand && (
          <BrandDetails
            brand={detailBrand}
            parts={parts.filter((p) => p.brandId === detailBrand.id)}
            onClose={closeDetail}
          />
        )}
      </div>
    </>
  );
}
